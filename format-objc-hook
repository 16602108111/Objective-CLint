#!/usr/bin/env bash
# ~/.git_template.local/hooks/pre-commit
# format-objc-hook
# pre-commit hook to check if any unformatted Objective-C files would be committed. Fails the check if so, and provides instructions.
#
# Copyright 2015 Square, Inc

IFS=$'\n'
export CDPATH=""
DIR=$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)
source "$DIR"/lib/common-lib.sh

echo "$@"

# Don't do anything unless a .clang-format file exists
# ln -sf "$DIR/.clang-format" ".clang-format"
if [ ! -f ".clang-format" ]; then
  echo 'lost .clang-format file'
  exit 1
fi

objc_files=$(objc_files_to_format "$@")

# if not have check files quit process
if [ -z "$objc_files" ]; then 
#  echo 'not find can check object-c files'
 exit 0
fi
 
function format_objc() {
  success=0
  # for file in $objc_files; do
  #   "$DIR"/format-objc-file-dry-run.sh "$file"
  #   difference=$(diff -q "$file" "$?"  | wc -l)
  #   if [ "$difference" -gt 0 ]; then
  #     if [ $success -eq 0 ]; then
  #       echo -e "ðŸš¸ Format and stage individual files:"
  #     fi
  #     # This is what the dev can run to fixup an individual file
  #     echo "\"$DIR\"/format-objc-file.sh '$file' && git add '$file';"
  #     success=1
  #   fi
  # done
  # if [ $success -gt 0 ]; then
  #   echo -e "\nðŸš€  Format and stage all affected files:\n\t \"$DIR\"/format-objc-files.sh -s"
  # fi
  return $success
}

format_objc
result=$?
result=1
exit 2

if [[ $result -eq 0 ]]; then
  exit 0
else
  echo -e "\nðŸ”´  There were formatting issues with this commit, run theðŸ‘† aboveðŸ‘† command to fix.\nðŸ’”  Commit anyway and skip this check by running git commit --no-verify" && success=1
  exit 1
 
fi
