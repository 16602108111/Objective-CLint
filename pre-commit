#!/usr/bin/env bash
# File generated by harry

HERE="$(cd "$(dirname "$0")" && pwd)"
WHITE="37"
RED="31"
GRAY="90"
RED_BACKGROUND="41m"
GREEN_BACKGROUND="42m"
SYAN_BACKGROUND="46m"
CACHE="${HERE}/.cache/"


function swift_files_to_format() {
	files=$(git diff --cached --name-only | grep -e '\.swift$')
	echo "$files" | grep -v 'Pods/' | grep -v 'Carthage/' >&1
}

function objc_files_to_format() {
	files=$(git diff --cached --name-only | grep -e '\.h$' -e '\.hh$' -e '\.m$' -e '\.mm$')
	echo "$files" | grep -v 'Pods/' | grep -v 'Carthage/' >&1
}

# params prefix, string, color, background_color, suffix
function log_color() {
    local prefix=$1
    local status=$2
    local status_color=$3
    local status_background_color=$4
    local is_r=$5
    if [[ -z "${status_background_color}" ]]; then
        if (( "$is_r" == 1 )); then
            printf "%s\033[%sm%s\033[0m\r" "${prefix}" "${status_color}" "${status}"
        else 
            printf "%s\033[%sm%s\033[0m\n" "${prefix}" "${status_color}" "${status}"
        fi
        
    else
        if (( "$is_r" == 1 )); then
            printf "%s\033[%s;%s%s\033[0m\r" "${prefix}" "${status_color}" "${status_background_color}" "${status}"
        else 
            printf "%s\033[%s;%s%s\033[0m\n" "${prefix}" "${status_color}" "${status_background_color}" "${status}"
        fi
    fi
}

# log lint tool [prefix]......[sufix][color][backgroundColor][status][is_r]
function log_color_dot() {
    terminal_width=$(tput cols)
    local prefix=$1
    local suffix=$2
    local status=$3
    local status_color=$4
    local status_background_color=$5
    local is_r=$6
    prefix_length=${#prefix}
    suffix_length=${#suffix}
    status_length=${#status}
    dot_length="$terminal_width - $prefix_length - $suffix_length - $status_length - 10"
    dot_string=""
    for((i=0;i<"$dot_length";i++)); do
        dot_string="${dot_string}""."
    done

    log_color "${prefix}${dot_string}${suffix}" "$status" "$status_color" "$status_background_color" "$is_r"
}

function print_exec_time() {
    start_time=$1
    end_time=$2
    # use bc command
    elapsed_time=$(echo "${end_time} - ${start_time}" | bc)
    # convert um to s
    seconds_time=$(echo "scale=2; ${elapsed_time} / 1000000000.0" | bc)
    echo "$seconds_time"
}

# objc files lint
function lint_objc() {
    return_code=0
    start_time=$(gdate +%s%N)
    external_log=""
    if [ "$(command -v format-objc-hook)" ]; then
        prefix="[format-objc]"
        log_color_dot "$prefix" "" "Linting" "${WHITE}" "${GREEN_BACKGROUND}" "1"
        lint_objc_files=$(objc_files_to_format)
        if [ -z "${lint_objc_files[*]}" ]; then
            log_color_dot "$prefix" "(no files to check)" "Skiped" "$WHITE" "$SYAN_BACKGROUND" "0"
        else
            objc_lint_html_dir="${CACHE}"objclint.html
            format-objc-hook --reporter "open_html" --output "${objc_lint_html_dir}" --quiet
            lint_result=$?
            if (( "$lint_result" == 0 )); then
                log_color_dot "$prefix" "" "Success" "${WHITE}" "$GREEN_BACKGROUND" "0"
            else 
                return_code=1
                log_color_dot "$prefix" "" "Failed" "${WHITE}" "$RED_BACKGROUND" "0"
                external_log="❌ 已自动打开html，请修复html中的lint问题，之后再次commit...😭😭😭"
            fi
        fi
    else 
        return_code=1
    fi
    end_time=$(gdate +%s%N) 
    duration_seconds=$(print_exec_time "$start_time" "$end_time")
    format_seconds=$(printf "%.2f" "$duration_seconds")
    printf "\033[%dm- duration: %ss\033[0m\n" "${GRAY}" "${format_seconds}"

    if [[ -n "${external_log}" ]]; then
        log_color "❌ 已自动打开html，请修复html中lint问题，之后再次commit...😭😭😭" "" "${RED}" "" "0"
    fi
    return "${return_code}"
}

# swift files lint
function swift_lint() {
    return_code=0
    start_time=$(gdate +%s%N)
    external_log=""
    
    if [ "$(command -v swiftlint)" ]; then
        prefix="[swiftlint]"
        log_color_dot "$prefix" "" "Linting" "${WHITE}" "${GREEN_BACKGROUND}" "1"
        lint_swift_files=$(swift_files_to_format)
        if [ -z "${lint_swift_files[*]}" ]; then
            log_color_dot "$prefix" "(no files to check)" "Skiped" "$WHITE" "$SYAN_BACKGROUND" "0"
        else
            swift_lint_html_dir="${CACHE}"swiftlint.html
            swiftlint lint --quiet --strict --reporter html --output "${swift_lint_html_dir}" $(printf "%s " "${lint_swift_files[@]}")
            lint_result=$?
            if (( "$lint_result" == 0 )); then
                log_color_dot "$prefix" "" "Success" "${WHITE}" "$GREEN_BACKGROUND" "0"
            else 
                return_code=1
                open "${swift_lint_html_dir}"
                log_color_dot "$prefix" "" "Failed" "${WHITE}" "$RED_BACKGROUND" "0"
                external_log="❌ 已自动打开html，请修复html中的lint问题，之后再次commit...😭😭😭"
            fi
        fi
    else 
        return_code=1
    fi
    end_time=$(gdate +%s%N) 
    duration_seconds=$(print_exec_time "$start_time" "$end_time")
    format_seconds=$(printf "%.2f" "$duration_seconds")
    printf "\033[%dm- duration: %ss\033[0m\n" "${GRAY}" "${format_seconds}"
    if [[ -n "${external_log}" ]]; then
        log_color "❌ 已自动打开html，请修复html中lint问题，之后再次commit...😭😭😭" "" "${RED}" "" "0"
    fi
    return "${return_code}"
}

if ! [ -d "${CACHE}" ]; then
    mkdir "${CACHE}"
fi

lint_objc
objc_code=$?
echo "" && swift_lint
swift_code=$?
echo "" 
if (( "$objc_code" == 0 )) && (( "$swift_code" == 0 )); then
    exit 0
else 
    exit 1
fi
